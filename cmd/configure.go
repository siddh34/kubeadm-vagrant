package cmd

import (
	"fmt"
	"os"
	"runtime"
	"strconv"

	"github.com/spf13/cobra"
	"gopkg.in/yaml.v2"

	"main/cmd/models"
	"main/cmd/utils"
)

// TODO: Add support a complete manual installation

// configureCmd represents the configure command
var configureCmd = &cobra.Command{
	Use: "configure",
	Short: "Configure the Vagrant and Kubeadm setup",
	Long: "This command will help you configure the Vagrant and Kubeadm setup by generating necessary configuration files.",
	Run: func(cmd *cobra.Command, args []string) {
		utils.Greenf("Starting configuration...\n")

		masterCPUs, _ := cmd.Flags().GetString("master-cpus")
        masterMemory, _ := cmd.Flags().GetString("master-memory")
        masterIP, _ := cmd.Flags().GetString("master-ip")
        workerCount, _ := cmd.Flags().GetString("worker-number")
        workerCPUs, _ := cmd.Flags().GetString("worker-cpus")
        workerMemory, _ := cmd.Flags().GetString("worker-memory")
		masterDiskSize, _ := cmd.Flags().GetString("master-disk-size")
		workerDiskSize, _ := cmd.Flags().GetString("worker-disk-size")

        masterCPUsInt, _ := strconv.Atoi(masterCPUs)
        masterMemoryInt, _ := strconv.Atoi(masterMemory)
        workerCountInt, _ := strconv.Atoi(workerCount)
        workerCPUsInt, _ := strconv.Atoi(workerCPUs)
        workerMemoryInt, _ := strconv.Atoi(workerMemory)
		isManual, _ := cmd.Flags().GetBool("manual-setup")

		utils.Boldf("Master: %d CPUs, %d MB Memory, IP: %s Disk: %s\n", masterCPUsInt, masterMemoryInt, masterIP, masterDiskSize)
		utils.Boldf("Workers: %d nodes, %d CPUs each, %d MB Memory each, %s Disk size each\n", workerCountInt, workerCPUsInt, workerMemoryInt, workerDiskSize)

		utils.Greenf("Loading environment variables...\n")
		masterEnvFile := ".env.master"
		workerEnvFile := ".env.worker"
		masterEnv, err := utils.LoadEnv(masterEnvFile)
		if err != nil {
			panic(fmt.Sprintf("Error loading environment variables from %s: %v", masterEnvFile, err))
		}
		workerEnv, err := utils.LoadEnv(workerEnvFile)
		if err != nil {
			panic(fmt.Sprintf("Error loading environment variables from %s: %v", workerEnvFile, err))
		}

		osType, _ := cmd.Flags().GetString("os")
		arch := runtime.GOARCH
		if arch == "aarch64" {
			arch = "arm64"
		}
		utils.Greenf("Detected OS: %s, Architecture: %s\n", osType, arch)
		image := utils.GetImage(osType, arch, isManual)
		if image == "" {
			panic("No image found for the specified OS and architecture")
		}
		utils.Boldf("Using OS: %s, Architecture: %s, Image: %s\n", osType, arch, image)

		masterScriptPath := utils.GetScripts(osType, masterIP, isManual, true)
		config := models.Config{
			Nodes: []models.Node{
				{
					Name:    "master",
					Hostname: "master",
					IP:      masterIP,
					CPUs:    masterCPUsInt,
					Memory:  masterMemoryInt,
					Image:   image,
					Script:  masterScriptPath,
					DiskSize: masterDiskSize,
					Env:     masterEnv,
				},
			},
		}

        for i := 1; i <= workerCountInt; i++ {
            workerIP := fmt.Sprintf("192.168.56.%d", 101+i)
			workerScriptPath := utils.GetScripts(osType, workerIP, isManual, false)
            worker := models.Node{
                Name:     fmt.Sprintf("worker%d", i),
                Hostname: fmt.Sprintf("worker%d", i),
                IP:       workerIP,
                CPUs:     workerCPUsInt,
                Memory:   workerMemoryInt,
                Image:    image,
                Script:   workerScriptPath,
                DiskSize: workerDiskSize,
				Env:     workerEnv,
            }
            config.Nodes = append(config.Nodes, worker)
        }

		yamlData, err := yaml.Marshal(config)
        if err != nil {
            panic(fmt.Sprintf("Error marshaling configuration to YAML: %v", err))
        }

        // Add header comment
        yamlString := "# DO NOT EDIT THIS FILE, AUTOGENERATED VIA configure command\n\n" + string(yamlData)

        // Write the configuration to the file
        err = os.WriteFile("configuration.yaml", []byte(yamlString), 0644)
        if err != nil {
            panic(fmt.Sprintf("Error writing configuration to file: %v", err))
        }

		utils.Greenf("Configuration completed successfully!\n")
	},
}

func init() {
	rootCmd.AddCommand(configureCmd)

	configureCmd.PersistentFlags().StringP("os", "o", "ubuntu", "Specify the operating system to use for the Vagrant setup")
	configureCmd.PersistentFlags().StringP("worker-number", "w", "1", "Specify the number of worker nodes to create")
	configureCmd.PersistentFlags().StringP("worker-memory", "m", "2048", "Specify the memory size for each worker node in MB")
	configureCmd.PersistentFlags().StringP("worker-cpus", "c", "2", "Specify the number of CPUs for each worker node")
	configureCmd.PersistentFlags().StringP("master-memory", "M", "4096", "Specify the memory size for the master node in MB")
	configureCmd.PersistentFlags().StringP("master-cpus", "C", "4", "Specify the number of CPUs for the master node")
	configureCmd.PersistentFlags().StringP("master-ip", "a", "192.168.56.101", "Specify the IP address for the master node")
	configureCmd.PersistentFlags().StringP("master-disk-size", "d", "20GB", "Specify the disk size for the master node")
	configureCmd.PersistentFlags().StringP("worker-disk-size", "D", "12GB", "Specify the disk size for each worker node")
	configureCmd.PersistentFlags().BoolP("manual-setup", "p", false, "Enable manual installation mode (default: false)")
}